plugins {
    id 'fabric-loom' version '1.3-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

// Set the archives name to the gradle.properties
base {
    archivesName = project.archives_base_name
}

// Fix fabric loader being loaded with the wrong version
configurations.all {
    resolutionStrategy {
        force ("net.fabricmc:fabric-loader:$loader_version")
    }
}

repositories {
    maven { url = "https://api.modrinth.com/maven" } // Trinkets, Yacl, Fractal
    maven { url = "https://maven.terraformersmc.com/" } // Modmenu
    maven { url = "https://maven.shedaniel.me" } // REI, Architectury
    maven { url = "https://jitpack.io/" } // Mixin extras
    maven { url = "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1" } // DevAuth
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
    maven { url = "https://maven.ladysnake.org/releases" } // Cardinal Components
    maven { url = "https://maven.quiltmc.org/repository/release/" } // Config stuff
    maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" } // More Config Stuff
}

dependencies {
    // Base
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Trinkets
    modImplementation ("maven.modrinth:trinkets:${project.trinkets_version}")
    // Cardinal Components
    project.cardinal_modules.replaceAll(" ", "").split(",").each { module ->
        modApi ("dev.onyxstudios.cardinal-components-api:cardinal-components-${module}:${project.cardinal_version}")
    }

    // Reach Entity Attributes
    include modImplementation("com.jamieswhiteshirt:reach-entity-attributes:${project.reach_entity_attributes_version}")

    // Fractal
    include modImplementation("maven.modrinth:fractal-lib:${project.fractal_version}")

    // Config
    modImplementation ("maven.modrinth:yacl:${project.yacl_version}")
    annotationProcessor ("maven.modrinth:yacl:${project.yacl_version}")
    modImplementation ("com.terraformersmc:modmenu:${project.modmenu_version}")

    // REI
    modCompileOnly ("me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}")
    modCompileOnly ("dev.architectury:architectury-fabric:${project.architectury_version}")

    // EMI
    modCompileOnly "dev.emi:emi-fabric:${emi_version}"

    // REI
    switch (project.item_viewer.toLowerCase()) {
        case "rei": modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:$rei_version"); break
        case "emi": modLocalRuntime("dev.emi:emi-fabric:${emi_version}"); break
        case "disabled": break
        default: println("Invalid item viewer: ${project.item_viewer} must be REI, EMI or disabled"); break
    }

    // Mixin extras
    implementation("com.github.LlamaLad7:MixinExtras:${project.mixin_extras_version}")
    annotationProcessor("com.github.LlamaLad7:MixinExtras:${project.mixin_extras_version}")

    // Dev Only
    modRuntimeOnly("me.djtheredstoner:DevAuth-fabric:${project.devauth_version}")
}

// Add some id's to the fabric.mod.json
processResources {
    inputs.property "version", project.version
    inputs.property "loader_version", project.loader_version
    inputs.property "minecraft_version", project.minecraft_version
    filesMatching("fabric.mod.json") {
        expand  "version": project.version,
                "loader_version": project.loader_version,
                "minecraft_version": project.minecraft_version
    }
}

// Set the Java compile options to target Java 17
tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}
java {
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

// Add the LICENSE file to the sources jar
jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}"}
    }
}

// Custom run configurations
loom {
    runs {
        datagenClient {
            inherit client
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=${mod_id}"

            runDir "build/datagen"
        }
    }
    runs {
        mixinDebug {
            inherit client
            name "Mixin Debug"
            vmArg("-Dmixin.debug.export=true")
        }
    }
}

// Add the generated sources to the fabric resources
sourceSets {
    main {
        resources {
            srcDirs += [
                    'src/main/generated'
            ]
        }
    }
}

// Maven publishing
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {}
}