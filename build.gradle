plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    maven { url = "https://api.modrinth.com/maven" } // Trinkets, Yacl
    maven { url = "https://maven.terraformersmc.com/" } // Modmenu
    maven { url = "https://maven.shedaniel.me" } // REI
    maven { url = "https://jitpack.io/" } // Mixin extras
    maven { url = "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1" } // DevAuth
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
    maven { url = "https://maven.ladysnake.org/releases" } // Cardinal Components
}

dependencies {
    // Base
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Trinkets
    modImplementation ("maven.modrinth:trinkets:${project.trinkets_version}")
    // Cardinal Components
    project.cardinal_modules.replaceAll(" ", "").split(",").each { module ->
        modApi ("dev.onyxstudios.cardinal-components-api:cardinal-components-${module}:${project.cardinal_version}")
    }

    // Reach Entity Attributes
    include modImplementation("com.jamieswhiteshirt:reach-entity-attributes:${project.reach_entity_attributes_version}")

    // Config
    modImplementation "maven.modrinth:yacl:${project.yacl_version}"
    modImplementation ("com.terraformersmc:modmenu:${project.modmenu_version}")

    // REI
    modCompileOnly ("me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}")
    modCompileOnly ("dev.architectury:architectury-fabric:${project.architectury_version}")

    // EMI
    modCompileOnly "dev.emi:emi-fabric:${emi_version}"

    // REI
    switch (project.item_viewer.toLowerCase()) {
        case "rei": modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:$rei_version"); break
        case "emi": modLocalRuntime("dev.emi:emi-fabric:${emi_version}"); break
        case "disabled": break
        default: println("Invalid item viewer: ${project.item_viewer} must be REI, EMI or disabled"); break
    }

    // Mixin extras
    implementation("com.github.LlamaLad7:MixinExtras:${project.mixin_extras_version}")
    annotationProcessor("com.github.LlamaLad7:MixinExtras:${project.mixin_extras_version}")

    // Dev Only
    modRuntimeOnly("me.djtheredstoner:DevAuth-fabric:${project.devauth_version}")
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
